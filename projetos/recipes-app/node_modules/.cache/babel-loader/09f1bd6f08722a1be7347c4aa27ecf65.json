{"ast":null,"code":"var _jsxFileName = \"/home/jederson/trybe/project-recipes/src/components/CategoryButtons.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ContextRecipes from '../context/ContextRecipes';\n\nfunction CategoryButtons(props) {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const {\n    resetFilter\n  } = props;\n  const {\n    setRecipes\n  } = useContext(ContextRecipes);\n  const location = useLocation().pathname;\n  const MAX_NUMBER_OF_CATEGORIES = 5;\n\n  const fetchCategories = async () => {\n    if (location.includes('comidas')) {\n      const data = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n      const responseJSON = await data.json();\n      setCategories(responseJSON.meals);\n    } else {\n      const data = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n      const responseJSON = await data.json();\n      setCategories(responseJSON.drinks);\n    }\n  };\n\n  const filterByCategory = async category => {\n    if (location.includes('comidas')) {\n      const data = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`);\n      const responseJSON = await data.json();\n      setRecipes(responseJSON.meals);\n    } else {\n      const data = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`);\n      const responseJSON = await data.json();\n      setRecipes(responseJSON.drinks);\n    }\n  };\n\n  const handleClick = ({\n    target\n  }) => {\n    if (target.innerHTML === selectedCategory) {\n      resetFilter();\n    }\n\n    setSelectedCategory(target.innerHTML);\n    filterByCategory(target.innerHTML);\n    console.log('CATEGORIA:', selectedCategory);\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []); // useEffect(() => {\n  //   setRecipes(arrayFiltered);\n  // }, [arrayFiltered]);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, categories.map((category, index) => /*#__PURE__*/React.createElement(\"button\", {\n    key: index,\n    type: \"button\",\n    \"data-testid\": `${category.strCategory}-category-filter`,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, category.strCategory)).filter((_, index) => index < MAX_NUMBER_OF_CATEGORIES), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"data-testid\": \"All-category-filter\",\n    onClick: () => resetFilter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, \"All\"));\n}\n\nCategoryButtons.propTypes = {\n  resetFilter: PropTypes.func.isRequired\n};\nexport default CategoryButtons;","map":{"version":3,"sources":["/home/jederson/trybe/project-recipes/src/components/CategoryButtons.js"],"names":["React","useState","useEffect","useContext","useLocation","PropTypes","ContextRecipes","CategoryButtons","props","categories","setCategories","selectedCategory","setSelectedCategory","resetFilter","setRecipes","location","pathname","MAX_NUMBER_OF_CATEGORIES","fetchCategories","includes","data","fetch","responseJSON","json","meals","drinks","filterByCategory","category","handleClick","target","innerHTML","console","log","map","index","strCategory","filter","_","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ContextRecipes from '../context/ContextRecipes';\n\nfunction CategoryButtons(props) {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const { resetFilter } = props;\n  const { setRecipes } = useContext(ContextRecipes);\n  const location = useLocation().pathname;\n  const MAX_NUMBER_OF_CATEGORIES = 5;\n\n  const fetchCategories = async () => {\n    if (location.includes('comidas')) {\n      const data = await fetch('https://www.themealdb.com/api/json/v1/1/list.php?c=list');\n      const responseJSON = await data.json();\n      setCategories(responseJSON.meals);\n    } else {\n      const data = await fetch('https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list');\n      const responseJSON = await data.json();\n      setCategories(responseJSON.drinks);\n    }\n  };\n\n  const filterByCategory = async (category) => {\n    if (location.includes('comidas')) {\n      const data = await fetch(`https://www.themealdb.com/api/json/v1/1/filter.php?c=${category}`);\n      const responseJSON = await data.json();\n      setRecipes(responseJSON.meals);\n    } else {\n      const data = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/filter.php?c=${category}`);\n      const responseJSON = await data.json();\n      setRecipes(responseJSON.drinks);\n    }\n  };\n\n  const handleClick = ({ target }) => {\n    if (target.innerHTML === selectedCategory) {\n      resetFilter();\n    }\n    setSelectedCategory(target.innerHTML);\n    filterByCategory(target.innerHTML);\n    console.log('CATEGORIA:', selectedCategory);\n  };\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  // useEffect(() => {\n  //   setRecipes(arrayFiltered);\n  // }, [arrayFiltered]);\n\n  return (\n    <div>\n      {categories.map((category, index) => (\n        <button\n          key={ index }\n          type=\"button\"\n          data-testid={ `${category.strCategory}-category-filter` }\n          onClick={ handleClick }\n        >\n          {category.strCategory}\n        </button>\n      )).filter((_, index) => index < MAX_NUMBER_OF_CATEGORIES)}\n      <button\n        type=\"button\"\n        data-testid=\"All-category-filter\"\n        onClick={ () => resetFilter() }\n      >\n        All\n      </button>\n    </div>\n  );\n}\n\nCategoryButtons.propTypes = {\n  resetFilter: PropTypes.func.isRequired,\n};\n\nexport default CategoryButtons;\n"]},"metadata":{},"sourceType":"module"}